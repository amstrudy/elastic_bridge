<launch>

  <!-- Run ElasticFusion -->

  <node pkg="elastic_bridge" type="elastic_node" name="elastic_node" output="screen" >
    <param name="AUTOSTART" type="bool" value="true" />
    <param name="TOPIC_IMAGE_COLOR" type="string" value="/zedm/zed_node/right/image_rect_color" />
    <param name="TOPIC_IMAGE_DEPTH" type="string" value="/zedm/zed_node/depth/depth_registered" />
    <param name="TOPIC_CAMERA_INFO" type="string" value="/zedm/zed_node/right/camera_info" />
    <param name="PERIODIC_WORLD_PUBLICATION" type="int" value="10" />
    <param name="WORLD_FRAME" type="string" value="map_elastic_fusion" />
    <param name="CAMERA_FRAME" type="string" value="camera" />
    <param name="TF_POSE_FIRST" type="bool" value="true" />
    <param name="TF_INPUT_WORLD_FRAME" type="string" value="world" />
    <param name="TF_INPUT_CAMERA_FRAME" type="string" value="zedm_right_camera_optical_frame" />
  </node>

  <node pkg="tf" type="static_transform_publisher" name="elastic_fusion" args="0 0 0 0 0 0 map_elastic_fusion world 1000" />

  <!-- Head to ZEDm static transform -->
  <node pkg="tf" type="static_transform_publisher" name="head_to_zed" args="0.192184 0.0 -0.096498 0 0.1309 0 upperNeckPitchLink zedm_mount 1000" />
  
  <!-- Voxelize -->

  <arg name="downsample" default="false"/>

  <!-- Pointcloud2 topic name -->
  <arg name="input_pointcloud" default="/elastic_world_pub"/>
  <!-- Frame to convert before processing -->
  <arg name="input_frame" default="first_frame"/>
  <!-- Frame to convert after processing -->
  <arg name="output_frame" default="first_frame"/>
  <!-- Leaf size -->
  <arg name="desired_leaf_size" default="0.0075"/>  

  <group if="$(arg downsample)">

      <node pkg="nodelet" type="nodelet" name="pcl_manager_voxelize_colored_cloud" args="manager" output="screen" />

      <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
      <node pkg="nodelet" type="nodelet" name="colored_voxel_grid_z" args="load pcl/VoxelGrid pcl_manager_voxelize_colored_cloud" output="screen">
        <!-- <remap from="~input" to="/os_cloud_node/points_xyz_only" /> -->
        <remap from="~input" to="$(arg input_pointcloud)" />
        <rosparam>
          filter_field_name: z
          filter_limit_min: -5
          filter_limit_max: 5
          filter_limit_negative: False
        </rosparam>
        <param name="leaf_size" value="$(arg desired_leaf_size)" />
        <param name="input_frame" type="string" value="$(arg input_frame)" />
        <param name="output_frame" type="string" value="$(arg output_frame)" />
      </node>

      <node pkg="nodelet" type="nodelet" name="colored_voxel_grid_zy" args="load pcl/VoxelGrid pcl_manager_voxelize_colored_cloud" output="screen">
        <remap from="~input" to="/colored_voxel_grid_z/output" />
        <rosparam>
          filter_field_name: y
          filter_limit_min: -5
          filter_limit_max: 5
          filter_limit_negative: False
        </rosparam>
        <param name="leaf_size" value="$(arg desired_leaf_size)" />
      </node>

      <node pkg="nodelet" type="nodelet" name="colored_voxel_grid_zyx" args="load pcl/VoxelGrid pcl_manager_voxelize_colored_cloud" output="screen">
        <remap from="~input" to="/colored_voxel_grid_zy/output" />
        <rosparam>
          filter_field_name: x
          filter_limit_min: -5
          filter_limit_max: 5
          filter_limit_negative: False
        </rosparam>
        <param name="leaf_size" value="$(arg desired_leaf_size)" />
      </node>
  
  </group>

</launch>

